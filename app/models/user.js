// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, Schema, User, bcrypt, mongoose, userSchema;

  mongoose = require('mongoose');

  bcrypt = require('bcrypt-nodejs');

  Promise = require('bluebird');

  Schema = mongoose.Schema;

  userSchema = new Schema({
    username: String,
    password: String,
    createdAt: {
      type: Date,
      "default": Date.now
    }
  });

  userSchema.pre('save', true, function(next, done) {
    return userSchema.methods.hashPassword.call(this).then(function() {
      next();
      return done();
    });
  });

  userSchema.methods.comparePassword = function(attemptedPassword, callback) {
    return bcrypt.compare(attemptedPassword, this.password, function(err, isMatch) {
      return callback(isMatch);
    });
  };

  userSchema.methods.hashPassword = function() {
    var cipher;
    cipher = Promise.promisify(bcrypt.hash);
    return cipher(this.password, null, null).bind(this).then(function(hash) {
      return this.password = hash;
    });
  };

  User = mongoose.model('User', userSchema);

  module.exports = User;

}).call(this);

//# sourceMappingURL=user.map
